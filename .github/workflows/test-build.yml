name: Test Build

on:
  pull_request:
    branches: [master, main]
  push:
    branches: [master, main]
  workflow_dispatch:

env:
  JAVA_VERSION: "21"
  JAVA_DISTRIBUTION: "temurin"

jobs:
  test-build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Test compile
        run: mvn clean compile

      - name: Test Linux build
        run: mvn clean package --file pom.xml -Dgluonfx.target=host -DskipTests

      - name: Check build output
        run: |
          echo "Checking build outputs..."
          ls -la target/
          find target/ -name "*.jar" -o -name "javafx-*" | head -10

  test-build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Test compile
        run: mvn clean compile

      - name: Test Windows build
        run: mvn clean package --file pom.xml "-Dgluonfx.target=host" -DskipTests

      - name: Check build output
        run: |
          Write-Host "Checking build outputs..."
          if (Test-Path "target") {
            Get-ChildItem "target" -Recurse -Include "*.jar", "*.exe" | Select-Object -First 10
          } else {
            Write-Host "Target directory not found"
          }
        shell: powershell

  test-build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Test compile
        run: mvn clean compile

      - name: Test macOS build
        run: mvn clean package --file pom.xml -Dgluonfx.target=host -DskipTests

      - name: Check build output
        run: |
          echo "Checking build outputs..."
          ls -la target/
          find target/ -name "*.jar" -o -name "javafx-*" | head -10

  test-android-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "graalvm"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Test compile
        run: mvn clean compile

      - name: Test Android configuration
        run: |
          echo "Testing Android setup..."
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "GRAALVM_HOME: $GRAALVM_HOME"
          mvn clean compile --file pom.xml -P android -DskipTests

      - name: Verify Android dependencies
        run: |
          echo "Verifying Android dependencies..."
          ls -la $ANDROID_HOME/
          java -version

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn test --file pom.xml

      - name: Verify project structure
        run: |
          echo "Verifying project structure..."
          echo "Source files:"
          find src -name "*.java" | head -20
          echo "Resources:"
          find src -name "*.fxml" -o -name "*.css" -o -name "*.properties" | head -10
          echo "Build configuration:"
          ls -la *.xml *.yml *.yaml 2>/dev/null || echo "No config files found"

  build-summary:
    needs:
      [
        test-build-linux,
        test-build-windows,
        test-build-macos,
        test-android-setup,
        code-quality,
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## Build Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linux    | ${{ needs.test-build-linux.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows  | ${{ needs.test-build-windows.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS    | ${{ needs.test-build-macos.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Android  | ${{ needs.test-android-setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality  | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- If all tests pass, the code is ready for merge" >> $GITHUB_STEP_SUMMARY
          echo "- For releases, push a version tag to trigger the release workflow" >> $GITHUB_STEP_SUMMARY
          echo "- Check individual job logs for detailed information" >> $GITHUB_STEP_SUMMARY
