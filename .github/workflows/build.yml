name: Build and Release

on:
  push:
#    branches: [master, main]
    tags: ["v*"]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag"
        required: false
        type: string

env:
  JAVA_VERSION: "21"
  JAVA_DISTRIBUTION: "temurin"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'

      - name: Build with Maven
        run: mvn clean package

      - name: Package Linux executable
        run: |
          mkdir -p dist/linux
          cp scripts/start.sh dist/linux/
          cp -r target/*.jar dist/linux/
          cd dist && tar -czf javafx-app-linux-x64.tar.gz linux/

      - name: Upload Linux Package
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: dist/
#          path: dist/javafx-app-linux-x64.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'

      - name: Build with Maven
        run: mvn clean package

      - name: Package Windows executable
        run: |
          if (!(Test-Path "dist")) { New-Item -Path "dist" -ItemType Directory -Force }
          if (!(Test-Path "dist/windows")) { New-Item -Path "dist/windows" -ItemType Directory -Force }
          Copy-Item -Path "target/*.jar" -Destination "dist/windows/" -Recurse -Force
          if (Get-ChildItem -Path "dist/windows") {
            Compress-Archive -Path "dist/windows" -DestinationPath "dist/javafx-app-windows-x64.zip" -Force
          }
        shell: powershell

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: javafx-app-windows
          path: dist/
          retention-days: 30

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'

      - name: Build with Maven
        run: mvn clean package

      - name: Package macOS executable
        run: |
          mkdir -p dist/macos
          cp -r target/javafx*.jar dist/macos/
          cd dist && tar -czf javafx-app-macos.tar.gz macos/

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: javafx-app-macos
          path: dist/
          retention-days: 30


  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts/javafx-app-linux -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts/javafx-app-windows -name "*.zip" -exec cp {} release-assets/ \;
          find artifacts/javafx-app-macos -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts/javafx-app-android -name "*.apk" -exec cp {} release-assets/ \;
          echo "Release assets:"
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## JavaFX Cross-Platform Application Release ${{ steps.tag.outputs.tag }}

          ### 🎉 What's New
          - Cross-platform JavaFX application with native compilation
          - Support for Windows, macOS, Linux, and Android platforms
          - Optimized native executables using GraalVM

          ### 📦 Downloads
          Choose the appropriate package for your platform:

          - **🐧 Linux (x64)**: javafx-app-linux-x64.tar.gz
            - Extract and run ./start.sh or ./javafx-cross-platform-starter

          - **🪟 Windows (x64)**: javafx-app-windows-x64.zip
            - Extract and run start.bat or javafx-cross-platform-starter.exe

          - **🍎 macOS**: javafx-app-macos.tar.gz
            - Extract and run ./start.sh or ./javafx-cross-platform-starter

          - **🤖 Android**: javafx-app-android.apk
            - Install on Android device (requires enabling "Unknown sources")

          ### 🚀 Installation Instructions

          #### Desktop Platforms (Linux/Windows/macOS)
          1. Download the appropriate archive for your platform
          2. Extract the archive to a directory of your choice
          3. Run the startup script or executable directly
          4. Enjoy the application!

          #### Android
          1. Download the APK file
          2. Enable "Install from unknown sources" in your Android settings
          3. Install the APK file
          4. Launch the app from your app drawer

          ### 🔧 Requirements
          - **Desktop**: No additional requirements (self-contained executables)
          - **Android**: Android 7.0 (API level 24) or higher

          ### 🐛 Known Issues
          - First launch may take a few seconds due to native compilation optimizations
          - On macOS, you may need to allow the app in System Preferences > Security & Privacy
          EOF

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.tag }}
          name: JavaFX Cross-Platform App ${{ steps.tag.outputs.tag }}
          bodyFile: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, '-') || contains(steps.tag.outputs.tag, 'alpha') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'rc') }}
          artifacts: release-assets/*
          token: ${{ secrets.GITHUB_TOKEN }}
          makeLatest: true

      - name: Upload release summary
        run: |
          echo "🎉 Release ${{ steps.tag.outputs.tag }} has been created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "📦 The following artifacts have been uploaded:" >> $GITHUB_STEP_SUMMARY
          echo "- Linux x64 (tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows x64 (zip)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- Android (apk)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Check the [Releases page](https://github.com/${{ github.repository }}/releases) to download the binaries." >> $GITHUB_STEP_SUMMARY
