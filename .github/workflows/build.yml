name: Build and Release

on:
  push:
#    branches: [master, main]
    tags: ["v*"]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag"
        required: false
        type: string

env:
  JAVA_VERSION: "21"
  JAVA_DISTRIBUTION: "temurin"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'

      - name: Build with Maven
        run: mvn clean package

      - name: Package Linux executable
        run: |
          mkdir -p dist/linux
          cp scripts/start.sh dist/linux/
          cp -r target/*.jar dist/linux/
          cd dist && tar -czf javafx-app-linux-x64.tar.gz linux/

      - name: Upload Linux Package
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: dist/
#          path: dist/javafx-app-linux-x64.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'

      - name: Build with Maven
        run: mvn clean package

      - name: Package Windows executable
        run: |
          if (!(Test-Path "dist")) { New-Item -Path "dist" -ItemType Directory -Force }
          if (!(Test-Path "dist/windows")) { New-Item -Path "dist/windows" -ItemType Directory -Force }
          Copy-Item -Path "target/*.jar" -Destination "dist/windows/" -Recurse -Force
          if (Get-ChildItem -Path "dist/windows") {
            Compress-Archive -Path "dist/windows" -DestinationPath "dist/javafx-app-windows-x64.zip" -Force
          }
        shell: powershell

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: javafx-app-windows
          path: dist/
          retention-days: 30

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'

      - name: Build with Maven
        run: mvn clean package

      - name: Package macOS executable
        run: |
          mkdir -p dist/macos
          cp -r target/javafx*.jar dist/macos/
          cd dist && tar -czf javafx-app-macos.tar.gz macos/

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: javafx-app-macos
          path: dist/
          retention-days: 30


  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          ls -l dist

      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            *.jar
            *.tar.gz

      - name: Upload release summary
        run: |
          echo "ðŸŽ‰ Release ${{ steps.tag.outputs.tag }} has been created successfully!" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ The following artifacts have been uploaded:" >> $GITHUB_STEP_SUMMARY
          echo "- Linux x64 (tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows x64 (zip)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— Check the [Releases page](https://github.com/${{ github.repository }}/releases) to download the binaries." >> $GITHUB_STEP_SUMMARY
